//TODO copyright header

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/cloudfoundry-incubator/service-fabrik-apiserver/pkg/apis/deployment/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DirectorLister helps list Directors.
type DirectorLister interface {
	// List lists all Directors in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Director, err error)
	// Directors returns an object that can list and get Directors.
	Directors(namespace string) DirectorNamespaceLister
	DirectorListerExpansion
}

// directorLister implements the DirectorLister interface.
type directorLister struct {
	indexer cache.Indexer
}

// NewDirectorLister returns a new DirectorLister.
func NewDirectorLister(indexer cache.Indexer) DirectorLister {
	return &directorLister{indexer: indexer}
}

// List lists all Directors in the indexer.
func (s *directorLister) List(selector labels.Selector) (ret []*v1alpha1.Director, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Director))
	})
	return ret, err
}

// Directors returns an object that can list and get Directors.
func (s *directorLister) Directors(namespace string) DirectorNamespaceLister {
	return directorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DirectorNamespaceLister helps list and get Directors.
type DirectorNamespaceLister interface {
	// List lists all Directors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Director, err error)
	// Get retrieves the Director from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Director, error)
	DirectorNamespaceListerExpansion
}

// directorNamespaceLister implements the DirectorNamespaceLister
// interface.
type directorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Directors in the indexer for a given namespace.
func (s directorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Director, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Director))
	})
	return ret, err
}

// Get retrieves the Director from the indexer for a given namespace and name.
func (s directorNamespaceLister) Get(name string) (*v1alpha1.Director, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("director"), name)
	}
	return obj.(*v1alpha1.Director), nil
}
